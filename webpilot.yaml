openapi: 3.1.0
info:
  title: webPilot
  description: >-
    Start with a Request: Users can either directly request the 'longContentWriter' to write a long form article or
    choose to use 'webPageReader' for information gathering before content creation. In both scenarios, before using the
    'longContentWriter' service, I confirm all details of their request with the user, including the writing task
    (task), content summary (summary), writing style (style), and any additional information they provide.

    Information Gathering with 'webPageReader': When 'webPageReader' is used, I search the internet and gather relevant information based on the writing task. If more information is needed to enhance the article's depth and accuracy, I continue using 'webPageReader', integrating this information into the reference section.

    Content Generation by 'longContentWriter': After confirming all details with the user, including any additional contributions and enhanced information from 'webPageReader', I proceed to generate the long-form content. This ensures the content aligns with the specified requirements and style.

    Delivery of the Final Article: Upon completion, the content is delivered to the user for review. They can request revisions or additional information if necessary.

    Default Assumptions in Responses: When users request content creation, especially in areas requiring specific knowledge like Bitcoin trends, I will make an initial assumption about the writing style and target audience. For instance, I might assume a technical analysis style aimed at professionals. I will then ask the user if this assumption is okay or if they need any modifications. This approach helps streamline the content creation process.
  version: v1.1
servers:
  - url: https://gpts.webpilot.ai
paths:
  /api/read:
    post:
      operationId: webPageReader
      x-openai-isConsequential: false
      summary: visit web page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/visitWebPageRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/visitWebPageResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/visitWebPageError"
components:
  schemas:
    visitWebPageResponse:
      type: object
      properties:
        title:
          type: string
          description: The title of this web page
        content:
          type: string
          description: The content of the web page's url to be summarized
        meta:
          type: object
          description: The Html meta info of the web page
        links:
          type: array
          description: Some links in the web page
          items:
            type: string
        extra_search_results:
          type: array
          description: Additional Search results
          items:
            type: object
            properties:
              title:
                type: string
                description: the title of this search result
              link:
                type: string
                description: the link of this search result
              snippet:
                type: string
                description: the snippet of this search result
        todo:
          type: array
          description: what to do with the content
          items:
            type: string
        tips:
          type: array
          description: Tips placed at the end of the answer
          items:
            type: string
        rules:
          description: Adherence is required when outputting content.
          items:
            type: string
    visitWebPageRequest:
      type: object
      required:
        - link
        - ur
      properties:
        link:
          type: string
          description: Required, The web page's url to visit and retrieve content from.
        ur:
          type: string
          description: Required, a clear statement of the user's request, can be used as a search query and may include search
            operators.
        lp:
          type: boolean
          description: Required, Whether the link is directly provided by the user
        rt:
          type: boolean
          description: If the last request doesn't meet user's need, set this to true when trying to retry another request.
        l:
          type: string
          description: Required, the language used by the user in the request, according to the ISO 639-1 standard. For Chinese,
            use zh-CN for Simplified Chinese and zh-TW for Traditional Chinese.
    visitWebPageError:
      type: object
      properties:
        code:
          type: string
          description: error code
        message:
          type: string
          description: error message
        detail:
          type: string
          description: error detail
